print()
summary(df)  # Gives frequencies for factors only
summary  # Gives frequencies for factors only
summary(df)  # Gives frequencies for factors only
# summary() not very useful
df %>%
select(region) %>%
summary()
# table() works better
df %>%
select(region) %>%
table()
# Using summary() works best
df %>%
select(psychRegions) %>%
summary()
# Using table()
df %>%
select(psychRegions) %>%
table()
# Summarize multiple factors
df <- df %>%
mutate(region = as.factor(region)) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
print()
summary(df)
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, rio, tidyverse)
df <- import("Exercise Files/data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
# rename(y = psychRegions) %>%
print()
df %>% summary()  # Summary for entire table
df %>%    # Summary for one variable
select(entrepreneur) %>%
summary()
# Tukey's five-number summary: minimum, lower-hinge,
# median, upper-hinge, maximum. No labels.
fivenum(df$entrepreneur)
# Boxplot stats: hinges, n, CI for median, outliers
boxplot(df$entrepreneur, notch = T, horizontal = T)
boxplot.stats(df$entrepreneur)
# Boxplot stats: hinges, n, CI for median, outliers
boxplot(df$entrepreneur, notch = T, horizontal = T)
boxplot.stats(df$entrepreneur)
p_load(psych)           # Load psych package
p_help(psych, web = F)  # Get info on psych package
describe(df$entrepreneur)  # Single variable
describe(df)               # Entire dataframe
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, rio, tidyverse)
# Save Google Correlate variables
df <- import("Exercise Files/data/StateData.xlsx") %>%
as_tibble() %>%
select(instagram:modernDance) %>%
print()
# Correlation matrix for data frame
cor(df)
# Rounded to 2 decimals
df %>%
cor() %>%
round(2)
# Can test one pair of variables at a time
# Gives r, hypothesis test, and confidence interval
cor.test(df$instagram, df$privacy)
# Install "Hmisc" package to get p-values for matrix
p_load(Hmisc)
# Need to coerce from dataframe to matrix to get both a
# correlation matrix and p-values (in separate tables)
df %>%
as.matrix() %>%
rcorr()
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, rio, tidyverse)
# Save Google Correlate variables
df <- import("Exercise Files/data/StateData.xlsx") %>%
as_tibble() %>%
select(instagram:modernDance) %>%
print()
# Save Google Correlate variables
df <- import("Exercise Files/data/StateData.xlsx") %>%
as_tibble() %>%
select(instagram:modernDance) %>%
print()
# Scatterplot of all Google Correlate variables
df %>%
select(instagram:modernDance) %>%
plot()
# Quick graphical check on data
df %>%
select(museum, volunteering) %>%
plot()
# Add regression line with lm()
lm(df$volunteering ~ df$museum) %>% abline()
# Compute and save bivariate regression
fit1 <- lm(df$volunteering ~ df$museum)
# Show model
fit1
# Summarize regression model
summary(fit1)
# Confidence intervals for coefficients
confint(fit1)
# Predict values of "volunteering"
predict(fit1)
# Prediction intervals for values of "volunteering"
predict(fit1, interval = "prediction")
# Regression diagnostics
lm.influence(fit1)
influence.measures(fit1)
# Moving the outcome to the front can make things easier
df <- df %>%
select(volunteering, everything()) %>%
print()
# Most concise
lm(df)
# Identify outcome, infer rest
lm(volunteering ~ ., data = df)
# Identify entire model
lm(volunteering ~ instagram + facebook + retweet +
entrepreneur + gdpr + privacy + university +
mortgage + museum + scrapbook + modernDance,
data = df)
# Save model
fit2 <- lm(df)
# Show model
fit2
# Summarize regression model
summary(fit2)
# Confidence intervals for coefficients
confint(fit2)
# Predict values of "volunteering"
predict(fit2)
# Prediction intervals for values of "volunteering"
predict(fit2, interval = "prediction")
# Regression diagnostics
lm.influence(fit2)
influence.measures(fit2)
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, rio, tidyverse)
# Save categorical variables
df <- import("Exercise Files/data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code, region, psychRegions) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
print()
# Create contingency table
ct <- table(df$region, df$psychRegions)
ct
p_load(magrittr)  # To get arithmetic aliases
# Row percentages
ct %>%
prop.table(1) %>%  # 1 is for row perdentages
round(2) %>%
multiply_by(100)
# Column percentages
ct %>%
prop.table(2) %>%  # 2 is for columns percentages
round(2) %>%
multiply_by(100)
# Total percentages
ct %>%
prop.table() %>%  # No argument for total percentages
round(2) %>%
multiply_by(100)
# Chi-squared testj (but n is small)
tchi <- chisq.test(ct)
tchi
# Additional tables
tchi$observed   # Observed frequencies (same as ct)
tchi$expected   # Expected frequencies
tchi$residuals  # Pearson's residual
tchi$stdres     # Standardized residual
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear console
cat("\014")  # ctrl+L
install.packages('IRkernel')
IRkernel::installspec(user=F)
library(IRkernel)
IRkernel::installspec(user=F)
library(tidyverse) ## I love ggplot and tidy data.... so this is a must for anything.
library(magick) ## Hello magick!!!
library(scales) ## I find rescale function so useful!  and i love show_col function :)
library(imager) ## i don't know how else to convert image to data frame at the moment.
image <- image_read("https://farm4.staticflickr.com/3579/3370591414_f321bd33ff_z.jpg")
my_colors <- pmap_df(params,get_colorPal)
get_colorPal <- function(flower, n=8, cs="RGB")
#print(cs)
tmp <-im %>% image_resize("100") %>%
image_quantize(max=n, colorspace=cs) %>%  ## reducing colours! different colorspace gives you different result
magick2cimg() %>%  ## I'm converting, becauase I want to use as.data.frame function in imager package.
RGBtoHSV() %>% ## i like sorting colour by hue rather than RGB (red green blue)
as.data.frame(wide="c") %>%  #3 making it wide makes it easier to output hex colour
mutate(hex=hsv(rescale(c.1, from=c(0,360)),c.2,c.3),
hue = c.1,
sat = c.2,
value = c.3) %>%
count(hex, hue, sat,value, sort=T) %>%
mutate(colorspace = cs)
my_colors <- pmap_df(params,get_colorPal)
params <- list(im=list(im),
n=12, ## number of colour you want
cs=colorspace_types()[-5])
params <- list(flower=list(im),
n=12, ## number of colour you want
cs=colorspace_types()[-5])
params <- list(flower=list(flower),
n=12, ## number of colour you want
cs=colorspace_types()[-5])
image <- image_read("https://farm4.staticflickr.com/3579/3370591414_f321bd33ff_z.jpg")
image <- image_read("https://farm4.staticflickr.com/3579/3370591414_f321bd33ff_z.jpg")
get_colorPal <- function(image, n=8, cs="RGB")
#print(cs)
tmp <-im %>% image_resize("100") %>%
image_quantize(max=n, colorspace=cs) %>%  ## reducing colours! different colorspace gives you different result
magick2cimg() %>%  ## I'm converting, becauase I want to use as.data.frame function in imager package.
RGBtoHSV() %>% ## i like sorting colour by hue rather than RGB (red green blue)
as.data.frame(wide="c") %>%  #3 making it wide makes it easier to output hex colour
mutate(hex=hsv(rescale(c.1, from=c(0,360)),c.2,c.3),
hue = c.1,
sat = c.2,
value = c.3) %>%
count(hex, hue, sat,value, sort=T) %>%
mutate(colorspace = cs)
params <- list(image=list(image),
n=12, ## number of colour you want
cs=colorspace_types()[-5])
my_colors <- pmap_df(params,get_colorPal)
my_colors <- pmap_df(params,get_colorPal)
## I'll use this plum flower image I took while back to extract colour.
## using image_read function in magick I can read image as below.
im <- image_read("https://farm4.staticflickr.com/3579/3370591414_f321bd33ff_z.jpg")
## now display image with 500px wide
im %>% image_resize("500")
## Reduce the colour used in image with image_quantize.  For example, let's say I want to reduce to 24 colours.
im %>%
image_resize("500") %>%
image_quantize(max=24)
ab"      "CMY"         "CMYK"        "Gray"
##  [6] "HCL"         "HCLp"        "HSB"         "HSI"         "HSL"
## [11] "HSV"         "HWB"         "Lab"         "LCH"         "LCHab"
## [16] "LCHuv"       "LinearGray"  "LMS"         "Log"         "Luv"
## [21] "OHTA"        "Rec601Luma"  "Rec601YCbCr" "Rec709Luma"  "Rec709YCbCr"
## [26] "RGB"         "scRGB"       "sRGB"        "Transparent" "XYZ"
## [31] "xyY"         "YCbCr"       "YDbDr"       "YCC"         "YIQ"
## [36] "YPbPr"       "YUV"
return(tmp %>% select(colorspace,hex,hue,sat,value,n)) ## I want data frame as a result.
return(tmp %>% select(colorspace,hex,hue,sat,value,n))} ## I want data frame as a result.
get_colorPal <- function(im, n=8, cs="RGB"){
#print(cs)
tmp <-im %>% image_resize("100") %>%
image_quantize(max=n, colorspace=cs) %>%  ## reducing colours! different colorspace gives you different result
magick2cimg() %>%  ## I'm converting, becauase I want to use as.data.frame function in imager package.
RGBtoHSV() %>% ## i like sorting colour by hue rather than RGB (red green blue)
as.data.frame(wide="c") %>%  #3 making it wide makes it easier to output hex colour
mutate(hex=hsv(rescale(c.1, from=c(0,360)),c.2,c.3),
hue = c.1,
sat = c.2,
value = c.3) %>%
count(hex, hue, sat,value, sort=T) %>%
mutate(colorspace = cs)
return(tmp %>% select(colorspace,hex,hue,sat,value,n))  ## I want data frame as a result.
}
"#3F8192" "#9F717D" "#6C9BAA" "#8DB4C2" "#D36C8D" "#A5C5D2"
## [8] "#CBCCD4"
View(params)
View(get_colorPal)
View(params)
params <- list(im=list(im),
n=12, ## number of colour you want
cs=colorspace_types()[-5]) ## gray fails so I've removed it...
my_colors <- pmap_df(params,get_colorPal)
my_colors %>%
group_by(colorspace) %>%
mutate(ypos=row_number(value)) %>%  ## I decided to stack colours by value.
ggplot(aes(x=fct_infreq(colorspace),y=ypos, fill=hex)) +
geom_tile() +
geom_text(aes(label=hex), color="#ffffffbe",
size=4, family="Roboto Condensed") +
scale_fill_identity() +
scale_y_continuous(breaks=NULL) +
theme_void(base_family="Roboto Condensed") +
coord_flip(ylim=c(1,12)) +
theme(axis.text = element_text(color = "black", family="Roboto Condensed", hjust=1)) +
labs(caption="Using different colourspce to reduce the colour used in images")
polar1 <-my_colors %>%
group_by(colorspace) %>%
mutate(ypos=row_number(hue)) %>%  ## alter stacking order
ggplot(aes(x=colorspace, y=ypos, fill=hex)) +
geom_tile() +
scale_fill_identity() +
scale_y_continuous(breaks=NULL) +
theme_void() +
coord_polar() +
expand_limits(y=-1)
View(polar1)
## quartz_off_screen
##                 2
image_append(fig_polar) ## by default it appends to the side.
polar2 <-my_colors %>%
group_by(colorspace) %>%
mutate(ypos=row_number(hue)) %>%
ggplot(aes(x=colorspace, y=hue, fill=hex,
height=sat*hue, width=value, alpha=value)) +
geom_tile() +
scale_fill_identity() +
scale_y_continuous(breaks=NULL) +
theme_void() +
coord_polar() +
expand_limits(y=0) +
scale_alpha_continuous(guide="none")
polar3 <-my_colors %>%
group_by(colorspace) %>%
mutate(ypos=row_number(hue)) %>%  ## alter stacking order
ggplot(aes(x=colorspace, y=ypos, fill=hex, height=sat*value)) +
geom_tile() +
scale_fill_identity() +
scale_y_continuous(breaks=NULL) +
theme_void() +
coord_polar() +
expand_limits(y=0)
## I think there's better way to write....
fig_polar <- image_graph(width=600, height=600)
polar1
polar2
polar3
dev.off()
## quartz_off_screen
##                 2
image_append(fig_polar) ## by default it appends to the side.
## I'll use this plum flower image I took while back to extract colour.
## using image_read function in magick I can read image as below.
im <- image_read("https://github.com/jeff-mos-def/jeff-mos-def.github.io/blob/master/assets/images/missyroses.jpg")
setwd("~/GitHub/jeff-mos-def.github.io-master/assets/images")
## I'll use this plum flower image I took while back to extract colour.
## using image_read function in magick I can read image as below.
im <- image_read("/missyroses.jpg")
## I'll use this plum flower image I took while back to extract colour.
## using image_read function in magick I can read image as below.
im <- image_read("\missyroses.jpg")
## I'll use this plum flower image I took while back to extract colour.
## using image_read function in magick I can read image as below.
im <- image_read("images/missyroses.jpg")
## I'll use this plum flower image I took while back to extract colour.
## using image_read function in magick I can read image as below.
im <- image_read("C:\Users\jeffc\Documents\GitHub\jeff-mos-def.github.io-master\assets\images\missyroses.jpg")
## I'll use this plum flower image I took while back to extract colour.
## using image_read function in magick I can read image as below.
im <- image_read("C:/Users/jeffc/Documents/GitHub/jeff-mos-def.github.io-master/assets/images/missyroses.jpg")
## now display image with 500px wide
im %>% image_resize("500")
## Reduce the colour used in image with image_quantize.  For example, let's say I want to reduce to 24 colours.
im %>%
image_resize("500") %>%
image_quantize(max=24)
## To view different colourspace you can specify in image_quantize function.
colorspace_types()
get_colorPal <- function(im, n=8, cs="RGB"){
#print(cs)
tmp <-im %>% image_resize("100") %>%
image_quantize(max=n, colorspace=cs) %>%  ## reducing colours! different colorspace gives you different result
magick2cimg() %>%  ## I'm converting, becauase I want to use as.data.frame function in imager package.
RGBtoHSV() %>% ## i like sorting colour by hue rather than RGB (red green blue)
as.data.frame(wide="c") %>%  #3 making it wide makes it easier to output hex colour
mutate(hex=hsv(rescale(c.1, from=c(0,360)),c.2,c.3),
hue = c.1,
sat = c.2,
value = c.3) %>%
count(hex, hue, sat,value, sort=T) %>%
mutate(colorspace = cs)
return(tmp %>% select(colorspace,hex,hue,sat,value,n))  ## I want data frame as a result.
}
## Here's example using plum flower image
get_colorPal(im)
##
## 1 RGB        #4D555C  208  0.163  0.361  2501
## 2 RGB        #3F8192  192. 0.568  0.573  1108
## 3 RGB        #9F717D  344. 0.289  0.624   996
## 4 RGB        #6C9BAA  195. 0.365  0.667   590
## 5 RGB        #8DB4C2  196. 0.273  0.761   551
## 6 RGB        #D36C8D  341. 0.488  0.827   434
## 7 RGB        #A5C5D2  197. 0.214  0.824   285
## 8 RGB        #CBCCD4  233. 0.0425 0.831   235
## if you just want list of colour values...
get_colorPal(im) %>% pull(hex)
params <- list(im=list(im),
n=12, ## number of colour you want
cs=colorspace_types()[-5]) ## gray fails so I've removed it...
my_colors <- pmap_df(params,get_colorPal)
my_colors %>%
group_by(colorspace) %>%
mutate(ypos=row_number(value)) %>%  ## I decided to stack colours by value.
ggplot(aes(x=fct_infreq(colorspace),y=ypos, fill=hex)) +
geom_tile() +
geom_text(aes(label=hex), color="#ffffffbe",
size=4, family="Roboto Condensed") +
scale_fill_identity() +
scale_y_continuous(breaks=NULL) +
theme_void(base_family="Roboto Condensed") +
coord_flip(ylim=c(1,12)) +
theme(axis.text = element_text(color = "black", family="Roboto Condensed", hjust=1)) +
labs(caption="Using different colourspce to reduce the colour used in images")
polar1 <-my_colors %>%
group_by(colorspace) %>%
mutate(ypos=row_number(hue)) %>%  ## alter stacking order
ggplot(aes(x=colorspace, y=ypos, fill=hex)) +
geom_tile() +
scale_fill_identity() +
scale_y_continuous(breaks=NULL) +
theme_void() +
coord_polar() +
expand_limits(y=-1)
polar2 <-my_colors %>%
group_by(colorspace) %>%
mutate(ypos=row_number(hue)) %>%
ggplot(aes(x=colorspace, y=hue, fill=hex,
height=sat*hue, width=value, alpha=value)) +
geom_tile() +
scale_fill_identity() +
scale_y_continuous(breaks=NULL) +
theme_void() +
coord_polar() +
expand_limits(y=0) +
scale_alpha_continuous(guide="none")
polar3 <-my_colors %>%
group_by(colorspace) %>%
mutate(ypos=row_number(hue)) %>%  ## alter stacking order
ggplot(aes(x=colorspace, y=ypos, fill=hex, height=sat*value)) +
geom_tile() +
scale_fill_identity() +
scale_y_continuous(breaks=NULL) +
theme_void() +
coord_polar() +
expand_limits(y=0)
## I think there's better way to write....
fig_polar <- image_graph(width=600, height=600)
polar1
polar2
polar3
dev.off()
## quartz_off_screen
##                 2
image_append(fig_polar) ## by default it appends to the side.
polar1
polar2
polar3
## I think there's better way to write....
fig_polar <- image_graph(width=600, height=600)
polar1
polar2
polar3
## quartz_off_screen
##                 2
image_append(fig_polar) ## by default it appends to the side.
View(my_colors)
my_colors %>%
group_by(colorspace) %>%
mutate(ypos=row_number(value)) %>%  ## I decided to stack colours by value.
ggplot(aes(x=fct_infreq(colorspace),y=ypos, fill=hex)) +
geom_tile() +
geom_text(aes(label=hex), color="#ffffffbe",
size=4, family="Roboto Condensed") +
scale_fill_identity() +
scale_y_continuous(breaks=NULL) +
theme_void(base_family="Roboto Condensed") +
coord_flip(ylim=c(1,12)) +
theme(axis.text = element_text(color = "black", family="Roboto Condensed", hjust=1)) +
labs(caption="Using different colourspce to reduce the colour used in images")
View(polar1)
my_colors <- pmap_df(params,get_colorPal)
## quartz_off_screen
##                 2
image_append(fig_polar) ## by default it appends to the side.
?aes
